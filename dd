@[TOC](2021-2023西邮linux兴趣小组纳新题)
# 

# 2023
## 0.鼠鼠我啊，要被祸害了
有 1000 瓶水，其中有一瓶有毒，l小白鼠只要尝一点带毒的水，24 小时后就会准时死亡。
至少要多少只小白鼠才能在 24 小时内鉴别出哪瓶水有毒？

将1000瓶水的标签转化会二进制，也就是0000000000到1111101000。然后将第一位为1的水混合在一起喂给小鼠，如果小鼠死亡则毒水二进制的一位为1，以此类推10次便可以得到毒水二进制编号，转化为10进制即可。

## 1.先预测一下~
按照函数要求输入自己的姓名试试~
~~~c
char *welcome() {
 // 请你返回自己的姓名
}
int main(void) {
 char *a = welcome();
 printf("Hi, 我相信 %s 可以面试成功!\n", a);
 return 0; }
~~~
如果是在函数中填写//char a[20]="yunjian";  return a;   最后会输出 我相信(null)可以面试成功！
我的名字去哪里了呢?由于a为字符串数组，存储在栈中，在函数结束后，栈的内存释放，导致a的地址指向了(null)成为空指针。
所以可以有两种做法，一是在 char前加入 static 关键词 ，使成为静态变量延长其生命周期。 
二是 ，申请动态规格，，char* a=(char*)malloc(sizeof(char)*7);(只是因为yunjian为7个字符长度)
strcpy(a,"yunjian"); 或者 a="yunjian";

当然也可以绕过不使用变量，char* a="yunjian";
或者直接返回字符串 return "yunjian";

## 2.欢迎来到 Linux 兴趣小组
有趣的输出，为什么会这样子呢~
~~~c
int main(void) {
 char *ptr0 = "Welcome to Xiyou Linux!";
 char ptr1[] = "Welcome to Xiyou Linux!";
 if (*ptr0 == *ptr1) {
 printf("%d\n", printf("Hello, Linux Group - 2%d", printf("")));
 }
 int diff = ptr0 - ptr1;
 printf("Pointer Difference: %d\n", diff);
}
~~~
输出：

> Hello, Linux Group - 2023
Pointer Difference: -2077387488 //（这会是个随机值）


1,printf()函数是从右往左读的，2，printf()函数的返回值为打印的字符串长度（包括空格）所以会打印出Hello, Linux Group - 2023
3，*ptr0为字符串常量，存放在静态区域，而ptr1[]是字符串变量，存放在栈中，地址当然不一样了,,所以地址有差值。

## 3.一切都翻倍了吗
① 请尝试解释一下程序的输出。
② 请谈谈对 sizeof()和 strlen()的理解吧。
③ 什么是 sprintf()，它的参数以及返回值又是什么呢？
~~~c
int main(void) {
 char arr[] = {'L', 'i', 'n', 'u', 'x', '\0', '!'}, str[20];
 short num = 520;
 int num2 = 1314;
 printf("%zu\t%zu\t%zu\n", sizeof(*&arr), sizeof(arr + 0),
 sizeof(num = num2 + 4));
 printf("%d\n", sprintf(str, "0x%x", num) == num);
 printf("%zu\t%zu\n", strlen(&str[0] + 1), strlen(arr + 0));
}
~~~
输出：

> 7       8       2
0
4       5

②sizeof()（为运算符）为字节数（计算时连带'\0'),strlen()(为string.h的函数) 计算char*字符串的长度（读到'\0'结束）
③sprintf() 为string.h的函数，参数为 sprintf( char *,const char *,(传入值可为int double char 等等));
作用将第二给参数打印进第一个参数中(char *)（不打印进终端）;
返回值与printf()的返回值类似，为打印的长度，

## 4.奇怪的输出
程序的输出结果是什么？解释一下为什么出现该结果吧~
~~~c
int main(void) {
 char a = 64 & 127;//100000 &111111==100000==64
 char b = 64 ^ 127;//100000 &111111==011111==63
 char c = -64 >> 6;//-100000 >> 6=-000001==-1
 char ch = a + b - c;//64+63-(-1)==128;
 printf("a = %d b = %d c = %d\n", a, b, c);
 printf("ch = %d\n", ch);
}
~~~
位运算，如注释
## 5.乍一看就不想看的函数
“人们常说互联网凛冬已至，要提高自己的竞争力，可我怎么卷都卷不过别人，只好用一些奇技淫
巧让我的代码变得高深莫测。”
这个 func()函数的功能是什么？是如何实现的？
~~~c
int func(int a, int b) {
 if (!a) return b;
 return func((a & b) << 1, a ^ b);
}
int main(void) {
 int a = 4, b = 9, c = -7;
 printf("%d\n", func(a, func(b, c)));
}
~~~
功能：实现两数相加
实现：由于位运算a+b=(a^b)+((a&b)<<1);(亦或运算相当于相加不进位，而与运算再右移相当于进位）
使这个等式递归，到进位(a&b)<<1==0时，便不进位了，a&b=a+b;

## 6.自定义过滤
请实现 filter()函数：过滤满足条件的数组元素。
提示：使用函数指针作为函数参数并且你需要为新数组分配空间。

```c
typedef int (*Predicate)(int);
int *filter(int *array, int length, Predicate predicate,
 int *resultLength); /*补全函数*/
int isPositive(int num) { return num > 0; }
int main(void) {
 int array[] = {-3, -2, -1, 0, 1, 2, 3, 4, 5, 6};
 int length = sizeof(array) / sizeof(array[0]);
 int resultLength;
 int *filteredNumbers = filter(array, length, isPositive,
 &resultLength);
 for (int i = 0; i < resultLength; i++) {
 printf("%d ", filteredNumbers[i]);
 }
 printf("\n");
 free(filteredNumbers);
 return 0; }`
```
不知道对于否
 
//
```c
typedef int (*Predicate)(int);//predicate 指针指向一个返回值为int (int)的函数
int *filter(int *array, int length, Predicate predicate, int *resultLength)
{ int *filteredNumbers=(int *)malloc(sizeof(int)*length);
for(int i=0 ;i<length ; i++){
    if(predicate(array[i]))
   filteredNumbers[i]= array[i] ;
*resultLength=length;
}

return  filteredNumbers ;    
}
```

## 7.静...态...
① 如何理解关键字 static？ 
② static 与变量结合后有什么作用？
③ static 与函数结合后有什么作用？
④ static 与指针结合后有什么作用？
⑤ static 如何影响内存分配？

① 关键词，静态
② 与局部变量的结合，改变变量的生命周期（不改变作用域），与全局变量结合改变其作用域（使其属性从外部链接变为内部链接）。
③ 与全局变量差不多，使其属性从外部链接变为内部链接，使其它文件无法使用该函数。
④ 指针的指向的地方是不变的（如果不重新赋值），其指向的东西可以变。
⑤ 将局部变量从栈区编入静态区（和全局变量放一起了）


## 8.救命！指针！
数组指针是什么？指针数组是什么？函数指针呢？用自己的话说出来更好哦，下面数据类
型的含义都是什么呢？
~~~c
int (*p)[10];//一个数组指针。指针指向一个10个int 元素的数组
const int* p[10];//一个指针数组，数组里有10个类型为指向const int的指针元素
int (*f1(int))(int*, int);//函数指针，指向一个返回值类型为（返回值类型为int,形参为(int*,int )的函数）的函数。
~~~

## 9.咋不循环了
程序直接运行，输出的内容是什么意思？
~~~c
int main(int argc, char* argv[]) {
 printf("[%d]\n", argc);
 while (argc) {
 ++argc;
 }
 int i = -1, j = argc, k = 1;
 i++ && j++ || k++;
 printf("i = %d, j = %d, k = %d\n", i, j, k);
 return EXIT_SUCCESS; }
~~~
//


## 10.到底是不是 TWO
~~~c
#define CAL(a) a * a * a
#define MAGIC_CAL(a, b) CAL(a) + CAL(b)
int main(void) {
 int nums = 1;
 if(16 / CAL(2) == 2)//if(16/2*2*2 ==2)   16/2*2*2等于32;（考点：宏定义单纯的文本替换，不会进行运算）
  {
 printf("I'm TWO(ﾉ>ω<)ﾉ\n");
 } else {
 int nums = MAGIC_CAL(++nums, 2);
 //赋值从右往左，nums=++nums*++nums*++nums+8;

 //（由于乘法两数相乘，同时进行，所以如果nums==1,则答案会是3*3*4+8==32）
 //算是局部函数，将nums全局变量覆盖掉了（这个是最后输出为1的原因）
 }
 printf("%d\n", nums);//1
}
~~~

## 11.克隆困境
试着运行一下程序，为什么会出现这样的结果？
直接将 s2 赋值给 s1 会出现哪些问题，应该如何解决？请写出相应代码。
~~~c
struct Student {
 char *name;
 int age;
};
void initializeStudent(struct Student *student, const char *name,
 int age) {
 student->name = (char *)malloc(strlen(name) + 1);
 strcpy(student->name, name);
 student->age = age; }
int main(void) {
 struct Student s1, s2;
 initializeStudent(&s1, "Tom", 18);
 initializeStudent(&s2, "Jerry", 28);
 s1 = s2;
 printf("s1 的姓名: %s 年龄: %d\n", s1.name, s1.age);
 printf("s2 的姓名: %s 年龄: %d\n", s2.name, s2.age);
 free(s1.name);
 free(s2.name);
 return 0; }
~~~
s1=s2会出现free(); double free detected in tcache 2
free()检测到双空闲空间，在执行程序的过程中对同一个空间释放了两遍
为什么呢？由于s1=s2的操作是结构体浅拷贝，两个结构体公用一个内存空间
解决方法，用strcp函数将第二个字符串放进第s1的地址。使其的空间独立。

## 12.你好，我是内存
作为一名合格的 C-Coder，一定对内存很敏感吧~来尝试理解这个程序吧！
~~~c
struct structure {
 int foo;
 union {
 int integer;
 char string[11];
 void *pointer;
 } node;
 short bar;
 long long baz;
 int array[7];
};
int main(void) {
 int arr[] = {0x590ff23c, 0x2fbc5a4d, 0x636c6557, 0x20656d6f,
 0x58206f74, 0x20545055, 0x6577202c, 0x6d6f636c,
 0x6f742065, 0x79695820, 0x4c20756f, 0x78756e69,
 0x6f724720, 0x5b207075, 0x33323032, 0x7825005d,
 0x636c6557, 0x64fd6d1d};
 printf("%s\n", ((struct structure *)arr)->node.string);
}
~~~

## 13.GNU/Linux (选做)
注：嘿！你或许对 Linux 命令不是很熟悉，甚至你没听说过 Linux。但别担心，这是选做题，了解
Linux 是加分项，但不了解也不扣分哦！
你知道 cd 命令的用法与 / . ~ 这些符号的含义吗？
请问你还懂得哪些与 GNU/Linux 相关的知识呢~

cd / 回到根目录
cd ~进入用户主目录
cd ! 将上个命令参数做为cd参数
cd .. 返回两层
cd .././..
